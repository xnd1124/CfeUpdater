&НаКлиенте
Перем РВ; // переменная, используемая для обслуживания регулярных выражений
&НаКлиенте
Перем ИмяФайлаРасширения; // путь к файлу, разбираемого алгоритмом во время итерации

// Блок переменных, хранящих содержимое файлов во время итерации разбора
&НаКлиенте
Перем СодержимоеФайлаОсновнойКонфигурации; // содержимое файла основной конфигурации
&НаКлиенте
Перем СодержимоеФайлаНовойКонфигурации; // содержимое файла новой конфигурации
&НаКлиенте
Перем СодержимоеФайлаФормыОсновнойКонфигурации; // содержимое файла формы основной конфигурации
&НаКлиенте
Перем СодержимоеФайлаФормыНовойКонфигурации; // содержимое файла формы новой конфигурации
&НаКлиенте
Перем ПроверяемаяСтрокаФайлов; // строка таблицы файлов для доступа к текущим путям проверки

&НаСервере
Перем СоответствиеРусскихИАнглийскихИмен; // кеш имен
Перем СписокСокращений; // список соращений в пути метаданных

#Область СобытияФормы
&НаКлиенте
Асинх Процедура ПриОткрытии(Отказ)
	ИнициироватьРегулярныеВыражения();
	ИмяФайлаРасширения = "";
	ЭтотОбъект.РазделительНаКлиенте = ПолучитьРазделительПути();
	Если Параметры.ЗапуститьАнализПриОткрытии Тогда
		Ждать Анализ(Неопределено);
		ЭтаФорма.Закрыть(МассивРазбора());
	КонецЕсли;
	ЗаполнитьДанныеОКонфигурациях();
	Ждать ОбновитьПодписьККаталогуСРезультатом();
	Если НЕ ЗначениеЗаполнено(Объект.ПрограммаПросмотраИзменений) Тогда
		Настройки(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Обработка = ЭтотОбъект();
	ЭтотОбъект.Заголовок = Обработка.Метаданные().Синоним + ". Версия: " + Обработка.ВерсияОбработки();
	НужноОбновитьФорму = Ложь;
	Обработка.ЗаполнитьНастройкиПоУмолчанию(НужноОбновитьФорму);
	Если НужноОбновитьФорму Тогда
		ЗначениеВРеквизитФормы(Обработка, "Объект");
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыВызоваТест") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ПараметрыВызоваТест.ЭтотОбъект);
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ПараметрыВызоваТест.Объект);
	Иначе
		ВосстановитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ЗапомнитьДанныеОКонфигурациях();
КонецПроцедуры     

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЭтотОбъект.ЗапущенаПрограммаСравнения Тогда
		ПоказатьПредупреждение(, "Запущена программа сравнения, закройте сначала ее");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область СобытияЭлементовФормы
&НаКлиенте
Процедура ПутьККаталогамНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = Элемент.Имя;
	ДопПараметры = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = ЭтотОбъект[Элемент.Имя];
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораКаталога", ЭтотОбъект, ДопПараметры);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеВыбораКаталога(Результат, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма[ДопПараметры.ИмяРеквизита] = Результат[0];
	ИмяДекорации = "Декорация" + ДопПараметры.ИмяРеквизита;
	Элементы[ИмяДекорации].Заголовок = Ждать ОписаниеКонфигурации(Результат[0]);
	Элементы[ИмяДекорации].ЦветТекста = ЦветТекста(Элементы[ИмяДекорации].Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура КаталогСРезультатамиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = КаталогСРезультатами;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораКаталогаСРезультатами", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеВыбораКаталогаСРезультатами(Результат, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.КаталогСРезультатами = Результат[0];
	Ждать ОбновитьПодписьККаталогуСРезультатом();
КонецПроцедуры

&НаКлиенте
Асинх Процедура КаталогСРезультатамиПриИзменении(Элемент)
	Ждать ОбновитьПодписьККаталогуСРезультатом();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ФайлыОбновляемойКонфигурацииПриИзменении(Элемент)
	ЭлементОписание = Элементы.ДекорацияФайлыОбновляемойКонфигурации;
	ЭлементОписание.Заголовок = Ждать ОписаниеКонфигурации(ФайлыОбновляемойКонфигурации);
	ЭлементОписание.ЦветТекста = ЦветТекста(ЭлементОписание.Заголовок);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ФайлыНовойКонфигурацииПриИзменении(Элемент)
	ЭлементОписание = Элементы.ДекорацияФайлыНовойКонфигурации;
	ЭлементОписание.Заголовок = Ждать ОписаниеКонфигурации(ФайлыНовойКонфигурации);
	ЭлементОписание.ЦветТекста = ЦветТекста(ЭлементОписание.Заголовок);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ФайлыРасширенияПриИзменении(Элемент)
	ЭлементОписание = Элементы.ДекорацияФайлыРасширения;
	ЭлементОписание.Заголовок = Ждать ОписаниеКонфигурации(ФайлыРасширения);
	ЭлементОписание.ЦветТекста = ЦветТекста(ЭлементОписание.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазбораПроблемыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработкаВыбораСтрокиДерева(ВыбраннаяСтрока, "ДеревоРазбораПроблемы");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазбораИнформацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработкаВыбораСтрокиДерева(ВыбраннаяСтрока, "ДеревоРазбораИнформация", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазбораПроблемыОтметкаПриИзменении(Элемент)
	ДеревоРазбораОтметкаПриИзменении("ДеревоРазбораПроблемы");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазбораИнформацияОтметкаПриИзменении(Элемент)
	ДеревоРазбораОтметкаПриИзменении("ДеревоРазбораИнформация");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазбораПроблемыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ДоступностьКоманд = ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.ИдСтроки);
	Элементы.ДеревоРазбораПроблемыКонтекстноеМеню.Доступность = ДоступностьКоманд;
	Элементы.ДеревоРазбораПроблемыКоманднаяПанель.Доступность = ДоступностьКоманд;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазбораИнформацияПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ДоступностьКоманд = ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.ИдСтроки);
	Элементы.ДеревоРазбораИнформацияКонтекстноеМеню.Доступность = ДоступностьКоманд;
	Элементы.ДеревоРазбораИнформацияКоманднаяПанель.Доступность = ДоступностьКоманд;
КонецПроцедуры

#КонецОбласти

#Область КомандыФорм
&НаКлиенте
Процедура Настройки(Команда)
	НастройкиСравнения = НастройкиСравнения();
	ЗаполнитьЗначенияСвойств(НастройкиСравнения, Объект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОткрытияНастроек", ЭтотОбъект);
	ОткрытьФорму("ВнешняяОбработка.АнализРасширенияПриОбновлении.Форма.Настройки",
		НастройкиСравнения, , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
&НаКлиенте
Процедура ПослеОткрытияНастроек(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Функция Анализ(Команда)
	Если ПроверитьЗаполнение() = Ложь Тогда
		Возврат "";
	КонецЕсли;
	Элементы.ГруппаОжидание.Видимость = Истина;
	ЗаполнитьОчиститьСлужебныеПеременные();
	Ждать РазборИсходников();
	Ждать КопированиеРасширениеВКаталог();
	ЗаменитьАвтоОбновляемыеМетоды();
	ВывестиРезультатВДеревья();
	РазвернутьДеревья();
	ОбновитьИтогиОтметок(ДеревоРазбораПроблемы);
	ОбновитьПодписьККаталогуСРезультатом();
	Элементы.ГруппаОжидание.Видимость = Ложь;  
	Если Параметры.ЗапуститьАнализПриОткрытии = Ложь Тогда
		СохранитьНастройки(); // от типового функционала отказываемся - т.к. он перетирает переданные в параметрах	
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура Объединить(Команда)
	ВыбраннаяСтрока = Элементы.ДеревоРазбораПроблемы.ТекущаяСтрока;
	ОбработкаВыбораСтрокиДерева(ВыбраннаяСтрока, "ДеревоРазбораПроблемы");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатОбъединения(Команда)
	ВыбраннаяСтрока = Элементы.ДеревоРазбораПроблемы.ТекущаяСтрока;
	ОбработкаВыбораСтрокиДерева(ВыбраннаяСтрока, "ДеревоРазбораПроблемы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтличия(Команда)
	ВыбраннаяСтрока = Элементы.ДеревоРазбораИнформация.ТекущаяСтрока;
	ОбработкаВыбораСтрокиДерева(ВыбраннаяСтрока, "ДеревоРазбораИнформация", Истина);
КонецПроцедуры
#КонецОбласти

#Область РегулярныеВыражения
&НаКлиенте
Процедура ИнициироватьРегулярныеВыражения()
	ИмяМакета = "ВнешняяОбработка.АнализРасширенияПриОбновлении.Макет.RegEx";
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ИмяМакета", ИмяМакета);
	ПараметрыПодключения.Вставить("УстановитьЕслиНеПодключено", Истина);
	ОповещениеПослеПодключения = Новый ОписаниеОповещения("ПослеПодключенияКомпоненты", ЭтотОбъект, ПараметрыПодключения);
	
	НачатьПодключениеВнешнейКомпоненты(ОповещениеПослеПодключения,
		ИмяМакета,
		"Component",
		ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры // ()

&НаКлиенте
Функция ПоискПоШаблону(ШаблонПоиска, ГдеИскать)
	НайденныеФрагменты = Новый Массив;
	РВ.НайтиСовпадения(ГдеИскать, ШаблонПоиска, Истина);
	Пока РВ.Следующий() Цикл
		НайденныйУчасток = РВ.ТекущееЗначение;
		КоличествоВложенныхГрупп = РВ.КоличествоВложенныхГрупп();
		РезультатПоиска = Новый Структура("Значение,Группы");
		РезультатПоиска.Значение = НайденныйУчасток;
		НайденныеГруппы = Новый Массив;
		Для СчетВнутренний = 0 По КоличествоВложенныхГрупп - 1 Цикл
			Подгруппа = РВ.ПолучитьПодгруппу(СчетВнутренний);
			НайденныеГруппы.Добавить(Подгруппа);
		КонецЦикла;
		РезультатПоиска.Группы = НайденныеГруппы;
		НайденныеФрагменты.Добавить(РезультатПоиска);
	КонецЦикла;
	
	Возврат НайденныеФрагменты;
КонецФункции // ()

&НаКлиенте
Функция ЗаменаПоШаблону(ЧтоЗаменяем, ГдеЗаменяем, НаЧтоЗаменяем)
	Результат = РВ.Заменить(ГдеЗаменяем, ЧтоЗаменяем, НаЧтоЗаменяем);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПослеПодключенияКомпоненты(Подключено, ПараметрыПодключения) Экспорт
	Если Подключено Тогда
		СоздатьПеременнуюДляРегулярныхВыражений();
	ИначеЕсли ПараметрыПодключения.УстановитьЕслиНеПодключено Тогда
		ОповещениеПослеУстановки = Новый ОписаниеОповещения("ПослеУстановкиКомпоненты", ЭтотОбъект, ПараметрыПодключения);
		НачатьУстановкуВнешнейКомпоненты(ОповещениеПослеУстановки, ПараметрыПодключения.ИмяМакета);
	Иначе
		ВызватьИсключение "Не удалось подключить внешнюю компоненту RegEx";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиКомпоненты(ПараметрыПодключения) Экспорт
	ПараметрыПодключения.УстановитьЕслиНеПодключено = Ложь;
	ОповещениеПослеПодключения = Новый ОписаниеОповещения("ПослеПодключенияКомпоненты", ЭтотОбъект, ПараметрыПодключения);
	НачатьПодключениеВнешнейКомпоненты(ОповещениеПослеПодключения, ПараметрыПодключения.ИмяМакета,
		"Component", ТипВнешнейКомпоненты.Native);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеременнуюДляРегулярныхВыражений()
	РВ = Новый("AddIn.Component.RegEx");
	РВ.Global = Истина;
	РВ.IgnoreCase = Истина;
	РВ.MultiLine = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Асинх Функция РазборИсходников()
	Ждать АнализФайловРасширения();
	АнализФайловОбновляемойКонфигураций();
	СравнитьМетоды();
	ПроверитьВозможностьАвтообновления();
	Возврат Неопределено; // из-за Асинх
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОчиститьСлужебныеПеременные()
	ИмяФайлаРасширения = "";
	РезультатыРазбора.Очистить();
	ПривестиПутиКЕдиномуФормату();
КонецПроцедуры

&НаКлиенте
Процедура ПривестиПутиКЕдиномуФормату()
	ФайлыОбновляемойКонфигурации = ФорматКаталога(ФайлыОбновляемойКонфигурации);
	ФайлыНовойКонфигурации = ФорматКаталога(ФайлыНовойКонфигурации);
	ФайлыРасширения = ФорматКаталога(ФайлыРасширения);
КонецПроцедуры

&НаКлиенте
Функция ФорматКаталога(Строка)
	МассивЧастей = СтрРазделить(Строка, РазделительНаКлиенте, Ложь);
	Результат = СтрСоединить(МассивЧастей, РазделительНаКлиенте);
	Возврат Результат;
КонецФункции

&НаКлиенте
Асинх Функция АнализФайловРасширения()
	Ждать АнализФайловРасширенияВМодулях();
	ЗаполнитьФайлыДляПроверки();
	Возврат Неопределено; // из-за асинх
КонецФункции

&НаКлиенте
Функция СодержимоеФайла(ИмяФайла)
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	Возврат ТекстовыйФайл.ПолучитьТекст();
КонецФункции // ()

&НаКлиенте
Процедура ЗаписатьФайл(ИмяФайла, Содержимое)
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТипФайла("UTF-8");
	ТекстовыйФайл.УстановитьТекст(Содержимое);
	ТекстовыйФайл.Записать(ИмяФайла);
КонецПроцедуры // ()

&НаКлиенте
Асинх Функция АнализФайловРасширенияВМодулях()
	// BSLLS:UsingSynchronousCalls-off
	Если Параметры.ИспользоватьМодальныйРежим Тогда
		НайденныеФайлы = Ждать НайтиФайлы(ФайлыРасширения, "*.bsl", Истина);
	Иначе
		НайденныеФайлы = Ждать НайтиФайлыАсинх(ФайлыРасширения, "*.bsl", Истина);
	КонецЕсли;
	// BSLLS:UsingSynchronousCalls-on
	
	Для Каждого НайденныеФайл Из НайденныеФайлы Цикл
		ИмяФайла = НайденныеФайл.ПолноеИмя;
		Если ЭтоСобственныйОбъектРасширения(ИмяФайла) И ЭтоМодульРасширения(ИмяФайла) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		СодержимоеФайла = СодержимоеФайла(ИмяФайла);
		Если ЭтоМодульФормы(ИмяФайла) Тогда
			РазобратьФорму(ИмяФайла, СодержимоеФайла);
		КонецЕсли;
		// BSLLS:LineLength-off
		ШаблонПоиска = "^\s*?&(Перед|Вместо|После|ИзменениеИКонтроль)\s*\(\""([\w\W]*?)\""\)*\s((?:Процедура|Функция)?\s*([\w\W]*?)\([\w\W]*?\)\s*(?:Экспорт)*\s*$)([\w\W]*?)(КонецПроцедуры|КонецФункции)";
		// BSLLS:LineLength-on
		РезультатыПоиска = ПоискПоШаблону(ШаблонПоиска, СодержимоеФайла);
		Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
			Подстроки = РезультатПоиска.Группы;
			НоваяСтрока = РезультатыРазбора.Добавить();
			НоваяСтрока.ИдСтроки = Новый УникальныйИдентификатор;
			НоваяСтрока.Аннотация = Подстроки[0];
			НоваяСтрока.ПереопределяемыйМетод = Подстроки[1];
			НоваяСтрока.НовыйМетод = Подстроки[3];
			НоваяСтрока.ФайлРасширения = ИмяФайла;
			
			МетодРасширение = Новый Структура;
			МетодРасширение.Вставить("ШапкаМетода", Подстроки[2]);
			МетодРасширение.Вставить("ТелоМетода", Подстроки[4]);
			МетодРасширение.Вставить("ЗавершениеМетода", Подстроки[5]);
			НоваяСтрока.МетодРасширение = МетодРасширение;
			
		КонецЦикла;
	КонецЦикла;
	Возврат Неопределено; // из-за Асинх
КонецФункции

&НаКлиенте
Функция ЭтоМодульРасширения(ИмяФайла)
	ЭтоМодульСеанса = СтрНайти(ИмяФайла, "SessionModule.bsl");
	ЭтоМодульПриложения = СтрНайти(ИмяФайла, "ManagedApplicationModule.bsl");
	ЭтоМодульВнешнегоСоединения = СтрНайти(ИмяФайла, "ExternalConnectionModule.bsl");
	Возврат ЭтоМодульСеанса ИЛИ ЭтоМодульПриложения ИЛИ ЭтоМодульВнешнегоСоединения;
КонецФункции // ()

&НаКлиенте
Функция ЭтоСобственныйОбъектРасширения(ИмяФайла)
	ФайлОбъектаМетаданных = ФайлОбъектаМетаданных(ИмяФайла);
	Если ФайлОбъектаМетаданных = "" Тогда
		Возврат Истина;
	КонецЕсли;
	СодержимоеФайла = СодержимоеФайла(ФайлОбъектаМетаданных);
	СтрокаЗаимствования = "<ObjectBelonging>";
	Результат = СтрНайти(СодержимоеФайла, СтрокаЗаимствования) = 0;
	Возврат Результат;
КонецФункции // ()

&НаКлиенте
Функция ФайлОбъектаМетаданных(ИмяФайла)
	ОтносительныйПуть = СтрЗаменить(ИмяФайла, ФайлыРасширения, "");
	ЧастиФайла = СтрРазделить(ОтносительныйПуть, РазделительНаКлиенте, Ложь);
	МинимальнаяДлинаПути = 2;
	Если ЧастиФайла.Количество() < МинимальнаяДлинаПути Тогда
		Возврат Ложь;
	КонецЕсли;
	ЧастиНовогоПути = Новый Массив;
	ЧастиНовогоПути.Добавить(ФайлыРасширения);
	ЧастиНовогоПути.Добавить(ЧастиФайла[0]); // типОбъекта
	ЧастиНовогоПути.Добавить(ЧастиФайла[1] + ".xml"); // имяОбъекта
	ПутьКФайлу = СтрСоединить(ЧастиНовогоПути, РазделительНаКлиенте);
	ФайлНаДиске = Новый Файл(ПутьКФайлу);
	Если ФайлНаДиске.Существует() Тогда
		Возврат ПутьКФайлу;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Функция ПутьКФормеМодуля(ИмяФайлаМодуля)
	ШаблонПоиска = "%1Module.bsl";
	СтрокаПоиска = СтрШаблон(ШаблонПоиска, РазделительНаКлиенте);
	
	Возврат СтрЗаменить(ИмяФайлаМодуля, СтрокаПоиска, ".xml");
КонецФункции // ()

&НаКлиенте
Процедура РазобратьФорму(ИмяФайлаМодуля, СодержимоеФайлаМодуля)
	ПутьКФорме = ПутьКФормеМодуля(ИмяФайлаМодуля);
	ФайлНаДиске = Новый Файл(ПутьКФорме);
	Если ФайлНаДиске.Существует() = Ложь Тогда
		Возврат;
	КонецЕсли;
	СодержимоеФайлаФормы = СодержимоеФайла(ПутьКФорме);
	РазобратьМетодыСамойФормы(ИмяФайлаМодуля, СодержимоеФайлаФормы, СодержимоеФайлаМодуля);
	РазобратьМетодыРеквизитов(ИмяФайлаМодуля, СодержимоеФайлаФормы, СодержимоеФайлаМодуля);
КонецПроцедуры

&НаКлиенте
Процедура РазобратьМетодыРеквизитов(ИмяФайлаМодуля, СодержимоеФайла, СодержимоеФайлаМодуля)
	ШаблонПоиска = "<InputField\s+name=""(\S+)""(?:[\s\S](?!InputField))*?<\/Events>";
	РезультатыПоиска = ПоискПоШаблону(ШаблонПоиска, СодержимоеФайла);
	Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
		Подстроки = РезультатПоиска.Группы;
		РеквизитФормы = Подстроки[0];
		РазобратьМетодыФормы(РезультатПоиска.Значение, РеквизитФормы, ИмяФайлаМодуля, СодержимоеФайлаМодуля);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазобратьМетодыСамойФормы(ИмяФайлаМодуля, СодержимоеФайла, СодержимоеФайлаМодуля)
	ШаблонПоиска = "<?xml version.*?(?:[\s\S](?!InputField))*?<\/Events>";
	РезультатыПоиска = ПоискПоШаблону(ШаблонПоиска, СодержимоеФайла);
	Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
		РазобратьМетодыФормы(РезультатПоиска.Значение, "", ИмяФайлаМодуля, СодержимоеФайлаМодуля);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазобратьМетодыФормы(ГдеИщем, РеквизитФормы, ИмяФайлаМодуля, СодержимоеФайлаМодуля)
	ШаблонПоискаСобытий = "<Event\sname=""(\S*)"".*callType=""(\S*)"".*>(\S*).*?<\/Event>";
	РезультатыПоискаСобытий = ПоискПоШаблону(ШаблонПоискаСобытий, ГдеИщем);
	Для Каждого РезультатПоискаСобытий Из РезультатыПоискаСобытий Цикл
		Подстроки = РезультатПоискаСобытий.Группы;
		// BSLLS:LineLength-off
		ШаблонПоискаМетода = "^\s*?((?:Процедура|Функция)\s*%1\([\w\W]*?\)\s*(?:Экспорт)*\s*$)([\w\W]*?)(КонецПроцедуры|КонецФункции)";
		// BSLLS:LineLength-on
		СтрокаПоиска = СтрШаблон(ШаблонПоискаМетода, Подстроки[2]);
		РезультатыПоискаМетода = ПоискПоШаблону(СтрокаПоиска, СодержимоеФайлаМодуля);
		Если РезультатыПоискаМетода.Количество() = 0 Тогда // свойство есть - но метод не прописан
			Продолжить;
		КонецЕсли;
		НоваяСтрока = РезультатыРазбора.Добавить();
		НоваяСтрока.ИдСтроки = Новый УникальныйИдентификатор;
		НоваяСтрока.ПереопределенНаФорме = Истина;
		НоваяСтрока.Аннотация = ОбработаннаяАннотация(Подстроки[1]);
		НоваяСтрока.ПереопределяемыйМетод = Подстроки[0]; // дописать преобразование в русский
		НоваяСтрока.НовыйМетод = Подстроки[2];
		НоваяСтрока.РеквизитФормы = РеквизитФормы;
		НоваяСтрока.ФайлРасширения = ИмяФайлаМодуля;
		Для Каждого РезультатПоискаМетода Из РезультатыПоискаМетода Цикл
			ПодстрокиМетода = РезультатПоискаМетода.Группы;
			МетодРасширение = Новый Структура;
			МетодРасширение.Вставить("ШапкаМетода", ПодстрокиМетода[0]);
			МетодРасширение.Вставить("ТелоМетода", ПодстрокиМетода[1]);
			МетодРасширение.Вставить("ЗавершениеМетода", ПодстрокиМетода[2]);
			НоваяСтрока.МетодРасширение = МетодРасширение;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЭтоМодульФормы(ПутьКФайлу)
	ШаблонПоиска = "Ext%1Form";
	СтрокаПоиска = СтрШаблон(ШаблонПоиска, РазделительНаКлиенте);
	Возврат СтрНайти(ПутьКФайлу, СтрокаПоиска) > 0;
КонецФункции // ()

&НаКлиенте
Процедура АнализФайловОбновляемойКонфигураций()
	Для Каждого Строка Из РезультатыРазбора Цикл
		Отбор = Новый Структура("ФайлРасширения", Строка.ФайлРасширения);
		НайденныеСтроки = ФайлыДляПроверки.НайтиСтроки(Отбор);
		ПроверяемаяСтрокаФайлов = НайденныеСтроки[0];
		Если ПрочитатьСодержимоеФайлов(Строка, ПроверяемаяСтрокаФайлов) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		РазобратьСтроку(Строка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайлыДляПроверки()
	ЗаполнитьФайламиРасширения();
	ЗаполнитьФайламиКонфигурации("ФайлОсновнойКонфигурации");
	ЗаполнитьФайламиКонфигурации("ФайлНовойКонфигурации");
КонецПроцедуры // ()

&НаКлиенте
Процедура ЗаполнитьФайламиРасширения()
	// свертка тз на клиенте недоступна - выполним самостоятельно на клиенте
	ФайлыДляПроверки.Очистить();
	УникальныеФайлы = Новый Соответствие;
	Для Каждого Строка Из РезультатыРазбора Цикл
		ЗначениеВКеше = УникальныеФайлы.Получить(Строка.ФайлРасширения);
		Если ЗначениеВКеше = Неопределено Тогда
			УникальныеФайлы.Вставить(Строка.ФайлРасширения, Строка.ПереопределенНаФорме);
		Иначе
			Если Строка.ПереопределенНаФорме = Истина И ЗначениеВКеше = Ложь Тогда
				УникальныеФайлы.Вставить(Строка.ФайлРасширения, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из УникальныеФайлы Цикл
		НоваяСтрока = ФайлыДляПроверки.Добавить();
		НоваяСтрока.ФайлРасширения = Строка.Ключ;
		НоваяСтрока.ЕстьМетодыПереопределенныеВФорме = Строка.Значение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайламиКонфигурации(ИмяРеквизита)
	Если ИмяРеквизита = "ФайлОсновнойКонфигурации" Тогда
		ПутьКФайлам = ФайлыОбновляемойКонфигурации;
	Иначе
		ПутьКФайлам = ФайлыНовойКонфигурации;
	КонецЕсли;
	Для Каждого Строка Из ФайлыДляПроверки Цикл
		ИмяФайла = СтрЗаменить(Строка.ФайлРасширения, ФайлыРасширения, ПутьКФайлам);
		ФайлНаДиске = Новый Файл(ИмяФайла);
		Если ФайлНаДиске.Существует() Тогда
			Строка[ИмяРеквизита] = ИмяФайла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьСодержимоеФайлов(СтрокаПроверки, СтрокаТаблицыФайлов)
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыФайлов.ФайлОсновнойКонфигурации)
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыФайлов.ФайлНовойКонфигурации) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрокаТаблицыФайлов.ФайлРасширения <> ИмяФайлаРасширения Тогда
		ИмяФайлаРасширения = СтрокаТаблицыФайлов.ФайлРасширения;
		СодержимоеФайлаОсновнойКонфигурации = СодержимоеФайла(СтрокаТаблицыФайлов.ФайлОсновнойКонфигурации);
		СодержимоеФайлаНовойКонфигурации = СодержимоеФайла(СтрокаТаблицыФайлов.ФайлНовойКонфигурации);
		Если СтрокаТаблицыФайлов.ЕстьМетодыПереопределенныеВФорме Тогда
			ПутьКФорме = ПутьКФормеМодуля(СтрокаТаблицыФайлов.ФайлОсновнойКонфигурации);
			ФайлНаДиске = Новый Файл(ПутьКФорме);
			Если ФайлНаДиске.Существует() Тогда
				СодержимоеФайлаФормыОсновнойКонфигурации = СодержимоеФайла(ПутьКФорме);
			Иначе
				СодержимоеФайлаФормыОсновнойКонфигурации = "";
			КонецЕсли;
			
			ПутьКФорме = ПутьКФормеМодуля(СтрокаТаблицыФайлов.ФайлНовойКонфигурации);
			ФайлНаДиске = Новый Файл(ПутьКФорме);
			Если ФайлНаДиске.Существует() Тогда
				СодержимоеФайлаФормыНовойКонфигурации = СодержимоеФайла(ПутьКФорме);
			Иначе
				СодержимоеФайлаФормыНовойКонфигурации = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура РазобратьСтроку(СтрокаПроверки)
	ИмяМетода = СтрокаПроверки.ПереопределяемыйМетод;
	СтрокаПроверки.МетодОсновнаяКонфигурация = МетодКонфигурации(ИмяМетода, СодержимоеФайлаОсновнойКонфигурации, Истина);
	СтрокаПроверки.МетодНоваяКонфигурация = МетодКонфигурации(ИмяМетода, СодержимоеФайлаНовойКонфигурации);
	Если СтрокаПроверки.ПереопределенНаФорме Тогда
		ИмяМетодаОсновнойФормы = ИмяМетодаФормы(СтрокаПроверки, СодержимоеФайлаФормыОсновнойКонфигурации);
		СтрокаПроверки.МетодОсновнаяКонфигурация = МетодКонфигурации(ИмяМетодаОсновнойФормы,
				СодержимоеФайлаОсновнойКонфигурации, Истина);
		
		ИмяМетодаНовойФормы = ИмяМетодаФормы(СтрокаПроверки, СодержимоеФайлаФормыНовойКонфигурации);
		СтрокаПроверки.МетодНоваяКонфигурация = МетодКонфигурации(ИмяМетодаНовойФормы, СодержимоеФайлаНовойКонфигурации);
		
		СтрокаПроверки.ПереопределяемыйМетод = ИмяМетодаОсновнойФормы;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция МетодКонфигурации(ИмяМетода, ТекстМодуля, ЭтоОсновнаяКонфигурация = Ложь)
	Если НЕ ЗначениеЗаполнено(ИмяМетода) Тогда
		Возврат Неопределено;
	КонецЕсли;
	// BSLLS:LineLength-off
	ШаблонПоискаСПараметром = "^\s*?((?:Процедура|Функция)\s*%1[\s]*?\([\w\W]*?\)\s*(?:Экспорт)*\s*$)([\w\W]*?)(КонецПроцедуры|КонецФункции)";
	// BSLLS:LineLength-on
	ШаблонПоиска = СтрШаблон(ШаблонПоискаСПараметром, ИмяМетода);
	РезультатыПоиска = ПоискПоШаблону(ШаблонПоиска, ТекстМодуля);
	Если РезультатыПоиска.Количество() > 1 Тогда
		Если ЭтоОсновнаяКонфигурация Тогда
			ПутьКФайлу = ПроверяемаяСтрокаФайлов.ФайлОсновнойКонфигурации;
		Иначе
			ПутьКФайлу = ПроверяемаяСтрокаФайлов.ФайлНовойКонфигурации;
		КонецЕсли;
		ШаблонСообщения = "Ошибка поиска метода %1 найдено более одного определения в файле %2";
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяМетода, ПутьКФайлу);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	ИначеЕсли РезультатыПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Подстроки = РезультатыПоиска[0].Группы;
		Результат = Новый Структура;
		Результат.Вставить("ШапкаМетода", Подстроки[0]);
		Результат.Вставить("ТелоМетода", Подстроки[1]);
		Результат.Вставить("ЗавершениеМетода", Подстроки[2]);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ИмяМетодаФормы(СтрокаПроверки, ТекстМодуля)
	ИмяМетодаСамойФормы = ИмяМетодаСамойФормы(СтрокаПроверки, ТекстМодуля);
	Если ЗначениеЗаполнено(ИмяМетодаСамойФормы) Тогда
		Возврат ИмяМетодаСамойФормы;
	КонецЕсли;
	ИмяМетодаРеквизитаФормы = ИмяМетодаРеквизитаФормы(СтрокаПроверки, ТекстМодуля);
	Возврат ИмяМетодаРеквизитаФормы;
КонецФункции

&НаКлиенте
Функция ИмяМетодаСамойФормы(СтрокаПроверки, ТекстМодуля)
	ЧтоИщем = СтрокаПроверки.ПереопределяемыйМетод;
	ШаблонПоискаМетодовФормы = "<?xml version.*?(?:[\s\S](?!InputField))*?<\/Events>";
	ШаблонПоискаМетода = "<Event\sname=""%1"".*>(\S*).*?<\/Event>";
	РезультатыПоиска = ПоискПоШаблону(ШаблонПоискаМетодовФормы, ТекстМодуля);
	Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
		СтрокаПоискаСобытий = СтрШаблон(ШаблонПоискаМетода, ЧтоИщем);
		РезультатыПоискаСобытий = ПоискПоШаблону(СтрокаПоискаСобытий, РезультатПоиска.Значение);
		Для Каждого РезультатПоискаСобытий Из РезультатыПоискаСобытий Цикл
			Возврат РезультатПоискаСобытий.Группы[0];
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ИмяМетодаРеквизитаФормы(СтрокаПроверки, ТекстМодуля)
	ЧтоИщем = СтрокаПроверки.ПереопределяемыйМетод;
	Владелец = СтрокаПроверки.РеквизитФормы;
	ШаблонПоискаМетодовРеквизитов = "<InputField\s+name=""%1""(?:[\s\S](?!InputField))*?<\/Events>";
	ШаблонПоискаМетода = "<Event\sname=""%1"".*>(\S*).*?<\/Event>";
	
	СтрокаПоискаМетодовРеквизитов = СтрШаблон(ШаблонПоискаМетодовРеквизитов, Владелец);
	РезультатыПоиска = ПоискПоШаблону(СтрокаПоискаМетодовРеквизитов, ТекстМодуля);
	Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
		СтрокаПоискаСобытий = СтрШаблон(ШаблонПоискаМетода, ЧтоИщем);
		РезультатыПоискаСобытий = ПоискПоШаблону(СтрокаПоискаСобытий, РезультатПоиска.Значение);
		Для Каждого РезультатПоискаСобытий Из РезультатыПоискаСобытий Цикл
			Возврат РезультатПоискаСобытий.Группы[0];
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура СравнитьМетоды()
	Для Каждого Строка Из РезультатыРазбора Цикл
		Строка.РезультатСравненияМетодов =
			РезультатСравненияМетодов(Строка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция РезультатСравненияМетодов(Строка)  
	// BSLLS:IfElseIfEndsWithElse-off
	СтарыйМетод = Строка.МетодОсновнаяКонфигурация;
	НовыйМетод = Строка.МетодНоваяКонфигурация;  
	РасширенияМетод = Строка.МетодРасширение;
	Если НовыйМетод = Неопределено Тогда  
		Отбор = Новый Структура("ФайлРасширения", Строка.ФайлРасширения);
		НайденныеСтроки = ФайлыДляПроверки.НайтиСтроки(Отбор); 
		Если Не ЗначениеЗаполнено(НайденныеСтроки[0].ФайлНовойКонфигурации) Тогда
			Возврат "Модуль отсутствует в новой конфигурации";	
		КонецЕсли;
		Возврат "Метод отсутствует в новой конфигурации";
	ИначеЕсли КоличествоАргументов(РасширенияМетод) <> КоличествоАргументов(НовыйМетод) Тогда
		Возврат "Отличается количество аргументов"; 
	КонецЕсли;                        
	Если СтарыйМетод = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	СтароеТело = ТелоМодуля(СтарыйМетод);
	НовоеТело = ТелоМодуля(НовыйМетод);
	
	Если Строка.Аннотация <> "ИзменениеИКонтроль"
		И СтароеТело <> НовоеТело Тогда
		Возврат ТекстОтличаютсяТекстыМетодов();   
	КонецЕсли;           
	
	Если Строка.Аннотация = "ИзменениеИКонтроль" Тогда
		ТелоБезВставкиУдаления = ТелоБезВставкиУдаления(РасширенияМетод); 
		Если ТелоБезВставкиУдаления = НовоеТело Тогда
			Возврат ""; // несмотря на различия в конф, расширение возможно поправлено вручную
		ИначеЕсли СтароеТело <>  НовоеТело Тогда
			Возврат ТекстОтличаютсяТекстыМетодов();	
		Иначе
			Возврат "Методы конфигураций идентичны,но метод расширения отличается от метода в конфигурации";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	// BSLLS:IfElseIfEndsWithElse-on
КонецФункции // ()

&НаКлиенте
Функция ТекстОтличаютсяТекстыМетодов()
	Возврат "Отличаются тексты методов";
КонецФункции

&НаКлиенте
Функция КоличествоАргументов(Метод)
	Если Метод = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	СтрокаПоиска = "[\s\S].*?\(\s*?\)";
	РезультатыПоиска = ПоискПоШаблону(СтрокаПоиска, Метод.ШапкаМетода);
	Если РезультатыПоиска.Количество() > 0 Тогда
		Возврат 0;
	Иначе
		Возврат СтрЧислоВхождений(Метод.ШапкаМетода, ",");
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ТелоБезВставкиУдаления(Метод)   
	ТелоМетода = Метод.ТелоМетода; 
	ЧтоИщем = "(#Удаление)|(#КонецУдаления)|(#Вставка[\w\W]*?#КонецВставки)";
	ТелоМетода = ЗаменаПоШаблону(ЧтоИщем, ТелоМетода, "");
	Возврат ТекстСПечатаемымиСимволами(ТелоМетода);
КонецФункции

&НаКлиенте
Функция ТелоМодуля(Метод)
	Возврат ТекстСПечатаемымиСимволами(Метод.ТелоМетода);
КонецФункции

&НаКлиенте
Функция ТекстСПечатаемымиСимволами(Текст)
	Результат = СтрЗаменить(Текст, " ", "");
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	Результат = СтрЗаменить(Результат, Символы.Таб, "");
	Результат = СтрЗаменить(Результат, Символы.ВТаб, "");
	Результат = СтрЗаменить(Результат, Символы.НПП, "");
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ВывестиРезультатВДереве(Знач ИмяДерева)
	СоответствиеРусскихИАнглийскихИмен = СоответствиеРусскихИАнглийскихИмен();
	СписокСокращений = СписокСокращений();
	Дерево = РеквизитФормыВЗначение(ИмяДерева);
	Дерево.Строки.Очистить();
	КоличествоЭлементов = 0;
	Для Каждого Строка Из РезультатыРазбора Цикл
		Если НЕ ЗначениеЗаполнено(Строка.РезультатСравненияМетодов) Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяДерева = "ДеревоРазбораИнформация"
			И (Строка.Аннотация = "Вместо" ИЛИ Строка.Аннотация = "ИзменениеИКонтроль") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяДерева = "ДеревоРазбораПроблемы"
			И (Строка.Аннотация = "Перед" ИЛИ Строка.Аннотация = "После") Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКМетаданным = ОбработанныйПутьКМетаданным(Строка.ФайлРасширения);
		ДобавитьЭлементыВДерево(Дерево.Строки, ПутьКМетаданным, Строка);
		КоличествоЭлементов = КоличествоЭлементов + 1;
	КонецЦикла;
	ЭтотОбъект[ИмяДерева + "Количество"] = КоличествоЭлементов;
	ЗаполнитьКартинкиДерева(Дерево.Строки, Неопределено);
	ЗначениеВРеквизитФормы(Дерево, ИмяДерева);
	
КонецПроцедуры

&НаСервере
Функция НовоеСокращение(Фрагмент, Замещение = "")
	Сокращение = Новый Структура("Фрагмент, Замещение");
	Сокращение.Вставить("Фрагмент", Фрагмент);
	Сокращение.Вставить("Замещение", Замещение);
	Возврат Сокращение;
КонецФункции

&НаСервере
Функция СписокСокращений()
	Результат = Новый Массив;
	МодульФормы = НовоеСокращение("Ext%1Form%1Module.bsl");
	Результат.Добавить(МодульФормы);
	ОбщийМодуль = НовоеСокращение("%1Ext%1Module.bsl");
	Результат.Добавить(ОбщийМодуль);
	МодульОбъекта = НовоеСокращение("Ext%1ObjectModule.bsl", "Модуль объекта");
	Результат.Добавить(МодульОбъекта);
	МодульМенеджера = НовоеСокращение("Ext%1ManagerModule.bsl", "Модуль менеджера");
	Результат.Добавить(МодульМенеджера);
	
	НачалоЗамены = "Прочее" + РазделительНаКлиенте;
	Замена = НачалоЗамены + "Модуль внешнего соединения";
	МодульВнешнегоСоединения = НовоеСокращение("Ext%1ExternalConnectionModule.bsl", Замена);
	Результат.Добавить(МодульВнешнегоСоединения);
	
	Замена = НачалоЗамены + "Модуль приложения";
	МодульВнешнегоСоединения = НовоеСокращение("Ext%1ManagedApplicationModule.bsl", Замена);
	Результат.Добавить(МодульВнешнегоСоединения);
	
	Замена = НачалоЗамены + "Модуль сеанса";
	МодульВнешнегоСоединения = НовоеСокращение("Ext%1SessionModule.bsl", Замена);
	Результат.Добавить(МодульВнешнегоСоединения);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция СокращенныйПутьКМетаданным(Путь)
	Результат = СтрЗаменить(Путь, ФайлыРасширения, "");
	Для Каждого Сокращение Из СписокСокращений Цикл
		ИскомыйФрагмент = СтрШаблон(Сокращение.Фрагмент, РазделительНаКлиенте);
		Результат = СтрЗаменить(Результат, ИскомыйФрагмент, Сокращение.Замещение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ОбработанныйПутьКМетаданным(Путь)
	Результат = СокращенныйПутьКМетаданным(Путь);
	Шаблон = "%1%2";
	Для Каждого Пара Из СоответствиеРусскихИАнглийскихИмен Цикл
		ЧтоИщем = СтрШаблон(Шаблон, Пара.Ключ, РазделительНаКлиенте);
		ЧтоПодставляем = СтрШаблон(Шаблон, Пара.Значение, РазделительНаКлиенте);
		Результат = СтрЗаменить(Результат, ЧтоИщем, ЧтоПодставляем);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция СоответствиеРусскихИАнглийскихИмен()
	Результат = Новый Соответствие;
	
	// Виды объектов метаданных (во множественном числе).
	Результат.Вставить("AccountingRegisters", "Регистры бухгалтерии");
	Результат.Вставить("AccumulationRegisters", "Регистры накопления");
	Результат.Вставить("BusinessProcesses", "Бизнес процесс");
	Результат.Вставить("CalculationRegisters", "Регистры расчета");
	Результат.Вставить("Catalogs", "Справочники");
	Результат.Вставить("ChartsOfAccounts", "Планы счетов");
	Результат.Вставить("ChartsOfCalculationTypes", "План видов расчета");
	Результат.Вставить("ChartsOfCharacteristicTypes", "Планы видов характеристик");
	Результат.Вставить("CommonCommands", "Общие команды");
	Результат.Вставить("CommonForms", "Общие формы");
	Результат.Вставить("CommonModules", "Общие модули");
	Результат.Вставить("Constants", "Константы");
	Результат.Вставить("DataProcessors", "Обработки");
	Результат.Вставить("Documents", "Документы");
	Результат.Вставить("DocumentJournals", "Журналы документов");
	Результат.Вставить("Enums", "Перечисления");
	Результат.Вставить("ExchangePlans", "Планы обмена");
	Результат.Вставить("InformationRegisters", "Регистры сведений");
	Результат.Вставить("Reports", "Отчеты");
	Результат.Вставить("Tasks", "Задачи");
	Результат.Вставить("WebServices", "Web сервисы");
	
	Результат.Вставить("Forms", "Формы");
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьКартинкиДерева(СтрокиДерева, КартинкаВладельца)
	Для Каждого Строка Из СтрокиДерева Цикл
		Если ЗначениеЗаполнено(Строка.Картинка) Тогда
			Продолжить;
		КонецЕсли;
		КартинкаПоИмени = КартинкаПоИмени(Строка.Имя);
		Если КартинкаПоИмени.Картинка <> Неопределено Тогда
			Строка.Картинка = КартинкаПоИмени.Картинка;
		Иначе
			Строка.Картинка = КартинкаВладельца;
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(КартинкаПоИмени.КартинкаПодчиненных) Тогда
				ЗаполнитьКартинкиДерева(Строка.Строки, КартинкаПоИмени.КартинкаПодчиненных);
			Иначе
				ЗаполнитьКартинкиДерева(Строка.Строки, Строка.Картинка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// BSLLS:CognitiveComplexity-off
// BSLLS:CyclomaticComplexity-off

&НаСервере
Функция КартинкаПоИмени(Имя)
	
	Результат = Новый Структура;
	ТекстКартинка = "Картинка";
	ТекстПодчиненные = "КартинкаПодчиненных";
	Результат.Вставить(ТекстПодчиненные, Неопределено);
	Если Имя = "Справочники" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.Справочник);
	ИначеЕсли Имя = "Формы" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.Форма);
		Результат.Вставить(ТекстПодчиненные, БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	ИначеЕсли Имя = "Общие модули"
		ИЛИ СтрНайти(Имя, "Модуль ") > 0 Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	ИначеЕсли Имя = "Регистры бухгалтерии" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.РегистрБухгалтерии);
	ИначеЕсли Имя = "Регистры накопления" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.РегистрНакопления);
	ИначеЕсли Имя = "Бизнес процесс" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.БизнесПроцесс);
	ИначеЕсли Имя = "Регистры расчета" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.РегистрРасчета);
	ИначеЕсли Имя = "Планы счетов" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.ПланСчетов);
	ИначеЕсли Имя = "План видов расчета" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.ПланВидовРасчета);
	ИначеЕсли Имя = "Планы видов характеристик" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.ПланВидовХарактеристик);
	ИначеЕсли Имя = "Общие формы" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.Форма);
	ИначеЕсли Имя = "Константы" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.Константа);
	ИначеЕсли Имя = "Обработки" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.Обработка);
	ИначеЕсли Имя = "Документы" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.Документ);
	ИначеЕсли Имя = "Журналы документов" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.ЖурналДокументов);
	ИначеЕсли Имя = "Перечисления" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.Перечисление);
	ИначеЕсли Имя = "Планы обмена" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.ПланОбмена);
	ИначеЕсли Имя = "Регистры сведений" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.РегистрСведений);
	ИначеЕсли Имя = "Отчеты" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.Отчет);
	ИначеЕсли Имя = "Задачи" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.Задача);
	ИначеЕсли Имя = "Web сервисы" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.ПерейтиПоВнешнейНавигационнойСсылке);
	ИначеЕсли Имя = "Прочее" Тогда
		Результат.Вставить(ТекстКартинка, БиблиотекаКартинок.ПараметрыВыводаКомпоновкиДанных);
	Иначе
		Результат.Вставить(ТекстКартинка, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// BSLLS:CognitiveComplexity-on
// BSLLS:CyclomaticComplexity-on

&НаСервере
Процедура ДобавитьЭлементыВДерево(Знач СтрокиУровня, ПутьКМетаданным, СтрокаПроблемы)
	ЧастиИмени = СтрРазделить(ПутьКМетаданным, РазделительНаКлиенте, Ложь);
	Для Каждого ЧастьИмени Из ЧастиИмени Цикл
		ИскомыйЭлемент = СтрокиУровня.Найти(ЧастьИмени, "Имя");
		Если ИскомыйЭлемент = Неопределено Тогда
			ИскомыйЭлемент = СтрокиУровня.Добавить();
			ИскомыйЭлемент.Имя = ЧастьИмени;
		КонецЕсли;
		СтрокиУровня = ИскомыйЭлемент.Строки;
	КонецЦикла;
	СтрокаСМетодом = ИскомыйЭлемент.Строки.Добавить();
	СтрокаСМетодом.Проблема = СтрокаПроблемы.РезультатСравненияМетодов;
	СтрокаСМетодом.Имя = СтрокаПроблемы.ПереопределяемыйМетод;
	СтрокаСМетодом.Картинка = БиблиотекаКартинок.ОформлениеВоcклицательныйЗнак;
	СтрокаСМетодом.Аннотация = ОбработаннаяАннотация(СтрокаПроблемы.Аннотация);
	СтрокаСМетодом.ИДСтроки = СтрокаПроблемы.ИдСтроки;
	СтрокаСМетодом.Авто = СтрокаПроблемы.Авто;
	Если СтрокаСМетодом.Авто Тогда
		СтрокаСМетодом.Отметка = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(ИмяЭлемента)
	Для Каждого Строка Из ЭтотОбъект[ИмяЭлемента].ПолучитьЭлементы() Цикл
		Элементы[ИмяЭлемента].Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбработаннаяАннотация(Имя)
	Если Имя = "After" Тогда
		Возврат "Перед";
	ИначеЕсли Имя = "Before" Тогда
		Возврат "После";
	ИначеЕсли Имя = "Override" Тогда
		Возврат "Вместо";
	Иначе
		Возврат Имя;
	КонецЕсли;
КонецФункции  

&НаКлиенте
Процедура ПоказатьОбъединить(СтрокаРазбора, БезОбъединения = Ложь)
	Если НЕ ЗначениеЗаполнено(Объект.ПрограммаПросмотраИзменений) Тогда
		ПоказатьПредупреждение( , "Не выбрана программа просмотра изменений");
		Возврат;
	КонецЕсли;
	
	Если СтрокаРазбора.РезультатСравненияМетодов = "Метод отсутствует в новой конфигурации"
		ИЛИ СтрокаРазбора.РезультатСравненияМетодов = "Модуль отсутствует в новой конфигурации" Тогда
		СравнениеТрехФайлов = Ложь;
		ПараметрыКоманднойСтроки = ПараметрыКоманднойСтроки2Файла();
	Иначе
		СравнениеТрехФайлов = Истина;
		ПараметрыКоманднойСтроки = ПараметрыКоманднойСтроки3Файла(БезОбъединения);
	КонецЕсли;
	РезультатСоздания = ФайлыДляСравнения(СтрокаРазбора, БезОбъединения, СравнениеТрехФайлов);
	ЗначенияПараметров = РезультатСоздания.ЗначенияПараметров;
	ДопПараметрыЗапуска = РезультатСоздания.ДопПараметрыЗапуска;
	ЗапуститьПрограммуСравнения(ПараметрыКоманднойСтроки, ЗначенияПараметров, ДопПараметрыЗапуска);
КонецПроцедуры

&НаКлиенте
Функция ФайлыДляСравнения(СтрокаРазбора, БезОбъединения, СравнениеТрехФайлов)
	// BSLLS:MissingTemporaryFileDeletion-off
	Результат = Новый Структура;
	ЗначенияПараметров = Новый Структура;
	ДопПараметрыЗапуска = Новый Структура;
	ТипТекст = "txt";
	ДопПараметрыЗапуска.Вставить("ИмяОсновная", ПолучитьИмяВременногоФайла(ТипТекст));
	ЗначенияПараметров.Вставить("СтараяКонфигурация", ДопПараметрыЗапуска.ИмяОсновная);
	СоздатьФайлСМетодом(ДопПараметрыЗапуска.ИмяОсновная, СтрокаРазбора.МетодОсновнаяКонфигурация);
	
	Если БезОбъединения = Ложь
		ИЛИ СравнениеТрехФайлов = Ложь
		ИЛИ СтрокаРазбора.РезультатОбъединения = "" Тогда
		ДопПараметрыЗапуска.Вставить("ИмяРасширение", ПолучитьИмяВременногоФайла(ТипТекст));
		ЗначенияПараметров.Вставить("Расширение", ДопПараметрыЗапуска.ИмяРасширение);
		СоздатьФайлСМетодом(ДопПараметрыЗапуска.ИмяРасширение, СтрокаРазбора.МетодРасширение);
	Иначе
		ДопПараметрыЗапуска.Вставить("ИмяРасширение", ПолучитьИмяВременногоФайла(ТипТекст));
		ЗначенияПараметров.Вставить("Расширение", ДопПараметрыЗапуска.ИмяРасширение);
		СоздатьТекстовыйФайл(ДопПараметрыЗапуска.ИмяРасширение, СтрокаРазбора.РезультатОбъединения);
	КонецЕсли;
	
	Если СравнениеТрехФайлов Тогда
		ДопПараметрыЗапуска.Вставить("ИмяНовая", ПолучитьИмяВременногоФайла(ТипТекст));
		ЗначенияПараметров.Вставить("НоваяКонфигурация", ДопПараметрыЗапуска.ИмяНовая);
		СоздатьФайлСМетодом(ДопПараметрыЗапуска.ИмяНовая, СтрокаРазбора.МетодНоваяКонфигурация);
		Если БезОбъединения = Ложь Тогда
			ДопПараметрыЗапуска.Вставить("РезультатОбъединения", ПолучитьИмяВременногоФайла(ТипТекст));
			ЗначенияПараметров.Вставить("РезультатОбъединения", ДопПараметрыЗапуска.РезультатОбъединения);
			СоздатьТекстовыйФайл(ДопПараметрыЗапуска.РезультатОбъединения);
		КонецЕсли;
	КонецЕсли;
	Результат.Вставить("ЗначенияПараметров", ЗначенияПараметров);
	Результат.Вставить("ДопПараметрыЗапуска", ДопПараметрыЗапуска);
	Возврат Результат;
	// BSLLS:MissingTemporaryFileDeletion-on
КонецФункции

&НаКлиенте
Процедура ЗапуститьПрограммуСравнения(ПараметрыКоманднойСтроки, ЗначенияПараметров, ДопПараметрыЗапуска) 
	ЭтотОбъект.ЗапущенаПрограммаСравнения = Истина;
	СтрокаПараметровПриложения = ЗаменаПараметровПоШаблону(ПараметрыКоманднойСтроки, ЗначенияПараметров);
	ШаблонЗапуска = """%1"" %2";
	СтрокаЗапуска = СтрШаблон(ШаблонЗапуска, ПутьКПрограммеСравнения(), СтрокаПараметровПриложения);
	
	ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
	ПараметрыЗапуска.ПолучитьПотокОшибок = Истина;
	Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПрограммыСравнения", ЭтотОбъект, ДопПараметрыЗапуска);
	ПараметрыЗапуска.Оповещение = Оповещение;
	УстановитьТолькоПросмотр(Истина);
	// BSLLS:ExternalAppStarting-off
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаЗапуска, ПараметрыЗапуска);
	// BSLLS:ExternalAppStarting-on
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеЗапускаПрограммыСравнения(Результат, ДопПараметрыЗапуска) Экспорт   
	ЭтотОбъект.ЗапущенаПрограммаСравнения = Ложь;
	УстановитьТолькоПросмотр(Ложь);
	Если Результат.ПотокОшибок <> "" Тогда
		ВызватьИсключение Результат.ПотокОшибок;
	КонецЕсли;
	Если Результат.КодВозврата = 0 И ДопПараметрыЗапуска.Свойство("РезультатОбъединения") Тогда
		СодержимоеФайла = СодержимоеФайла(ДопПараметрыЗапуска.РезультатОбъединения);
		Если ЗначениеЗаполнено(СодержимоеФайла) Тогда // P4merge не меняет код возврата
			ЗаменитьРешенныйМетодВФайле(ДопПараметрыЗапуска.РезультатОбъединения);
			ТекущиеДанные = Элементы.ДеревоРазбораПроблемы.ТекущиеДанные;
			ТекущиеДанные.Отметка = Истина;
			ДеревоРазбораОтметкаПриИзменении("ДеревоРазбораПроблемы");
		КонецЕсли;
	КонецЕсли;
	Ждать УдалитьФайлыАсинх(ДопПараметрыЗапуска.ИмяОсновная);
	Ждать УдалитьФайлыАсинх(ДопПараметрыЗапуска.ИмяРасширение);
	
	Если ДопПараметрыЗапуска.Свойство("ИмяНовая") Тогда
		Ждать УдалитьФайлыАсинх(ДопПараметрыЗапуска.ИмяНовая);
	КонецЕсли;
	Если ДопПараметрыЗапуска.Свойство("РезультатОбъединения") Тогда
		Ждать УдалитьФайлыАсинх(ДопПараметрыЗапуска.РезультатОбъединения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗаменаПараметровПоШаблону(ПараметрыКоманднойСтроки, ЗначенияПараметров)
	ЗначенияПараметров.Вставить("ЗаголовокСтарая", "Старая_конфигурация");
	ЗначенияПараметров.Вставить("ЗаголовокРасширение", "Расширение");
	Если ЗначенияПараметров.Свойство("НоваяКонфигурация")
		И ЗначениеЗаполнено(ЗначенияПараметров.НоваяКонфигурация) Тогда
		ЗначенияПараметров.Вставить("ЗаголовокНовая", "Новая_конфигурация");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ПараметрыКоманднойСтроки, ЗначенияПараметров);
КонецФункции

&НаКлиенте
Процедура СоздатьФайлСМетодом(ИмяФайла, Метод, ТолькоТело = Ложь)
	ТекстовыйФайл = Новый ТекстовыйДокумент;      
	Если Не ЗначениеЗаполнено(Метод) Тогда
		ТекстовыйФайл.Записать(ИмяФайла);
		Возврат;
	КонецЕсли;
	Если ТолькоТело Тогда
		ТекстовыйФайл.ДобавитьСтроку(Метод.ТелоМетода);
	Иначе
		ТекстовыйФайл.ДобавитьСтроку(Метод.ШапкаМетода);
		ТекстовыйФайл.ДобавитьСтроку(Метод.ТелоМетода);
		ТекстовыйФайл.ДобавитьСтроку(Метод.ЗавершениеМетода);
	КонецЕсли;
	ТекстовыйФайл.Записать(ИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстовыйФайл(ИмяФайла, Текст = "")
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(Текст);
	ТекстовыйФайл.Записать(ИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодчиненныеФлажки(ТекущиеДанные, Значение)
	ПодчиненныеСтроки = ТекущиеДанные.ПолучитьЭлементы();
	Для Каждого Строка Из ПодчиненныеСтроки Цикл
		Строка.Отметка = Значение;
		ОбновитьПодчиненныеФлажки(Строка, Строка.Отметка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРодительскиеФлажки(ТекущиеДанные)
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		ВсеФлагиОдинаковы = ВсеФлагиОдинаковы(ТекущиеДанные.Отметка, Родитель);
		Если ВсеФлагиОдинаковы Тогда
			Родитель.Отметка = ТекущиеДанные.Отметка;
		Иначе
			Родитель.Отметка = 2;
		КонецЕсли;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ВсеФлагиОдинаковы(Отметка, Родитель)
	ЭлементыТекущегоУровня = Родитель.ПолучитьЭлементы();
	Для Каждого Строка Из ЭлементыТекущегоУровня Цикл
		Если Строка.Отметка <> Отметка Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Асинх Функция ОписаниеКонфигурации(ПутьККаталогу)
	Файл = Новый Файл(ПутьККаталогу);
	Если Файл.Существует() = Ложь Тогда
		Возврат "Ошибка: каталог не существует";
	КонецЕсли;
	
	ПутьКФайлуОписанияКонфигурации = ПутьККаталогу + РазделительНаКлиенте + "Configuration.xml";
	НайденныеФайлы = Ждать НайтиФайлыАсинх(ПутьКФайлуОписанияКонфигурации);
	Если НайденныеФайлы.Количество() = 0 Тогда
		Возврат "Ошибка: некорректный каталог - в корне отсутствует файл Configuration.xml";
	КонецЕсли;
	
	СодержимоеФайла = СодержимоеФайла(НайденныеФайлы[0].ПолноеИмя);
	
	ШаблонПоиска = "<Properties>[\s\S]+<Name>(.*)<\/Name>";
	РезультатыПоиска = ПоискПоШаблону(ШаблонПоиска, СодержимоеФайла);
	Если РезультатыПоиска.Количество() = 0 Тогда
		Возврат "Ошибка: Не удалось найти имя конфигурации";
	КонецЕсли;
	ИмяКонфигурации = РезультатыПоиска[0].Группы[0];
	
	ШаблонПоиска = "<Properties>[\s\S]+<Version>(.*)<\/Version>";
	РезультатыПоиска = ПоискПоШаблону(ШаблонПоиска, СодержимоеФайла);
	Если РезультатыПоиска.Количество() = 0 Тогда
		ВерсияКонфигурации = "";
	Иначе
		ВерсияКонфигурации = РезультатыПоиска[0].Группы[0];
	КонецЕсли;
	
	Возврат ИмяКонфигурации + " " + ВерсияКонфигурации;
	
КонецФункции

&НаКлиенте
Функция ЦветТекста(Текст)
	Если СтрНайти(Нрег(Текст), "ошибка") > 0
		ИЛИ СтрНайти(Нрег(Текст), "внимание") > 0 Тогда
		Возврат WebЦвета.Красный;
	Иначе
		Возврат WebЦвета.Васильковый;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеОКонфигурациях()
	ПутиКРеквизитам = ПутиКРеквизитамФайлов();
	Для Каждого ПутьКРеквизиту Из ПутиКРеквизитам Цикл
		ЗначениеОписания = ЭтотОбъект["Описание" + ПутьКРеквизиту];
		Если ЗначениеЗаполнено(ЗначениеОписания) Тогда
			ЭлементОписание = Элементы["Декорация" + ПутьКРеквизиту];
			ЭлементОписание.Заголовок = ЗначениеОписания;
			ЭлементОписание.ЦветТекста = ЦветТекста(ЭлементОписание.Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьДанныеОКонфигурациях()
	ПутиКРеквизитам = ПутиКРеквизитамФайлов();
	Для Каждого ПутьКРеквизиту Из ПутиКРеквизитам Цикл
		ЭлементОписание = Элементы["Декорация" + ПутьКРеквизиту];
		ЭтотОбъект["Описание" + ПутьКРеквизиту] = ЭлементОписание.Заголовок;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПутиКРеквизитамФайлов()
	Результат = Новый Массив;
	Результат.Добавить("ФайлыОбновляемойКонфигурации");
	Результат.Добавить("ФайлыНовойКонфигурации");
	Результат.Добавить("ФайлыРасширения");
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция КаталогИзПолногоПутиФайла(ПутьКФайлу)
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Возврат ПутьКФайлу;
	КонецЕсли;
	ЧастиФайла = СтрРазделить(ПутьКфайлу, РазделительНаКлиенте);
	Если ЧастиФайла.Количество() = 0 Тогда
		Возврат ПутьКФайлу;
	КонецЕсли;
	ИндексПоследнего = ЧастиФайла.ВГраница();
	ЧастиФайла[ИндексПоследнего] = "";
	Возврат СтрСоединить(ЧастиФайла, РазделительНаКлиенте);
КонецФункции

&НаКлиенте
Процедура ПроверитьВозможностьАвтоОбновления()
	ЭтотОбъект.БылаОшибкаПриЗапускеГит = Ложь;
	Отбор = Новый Структура;
	Отбор.Вставить("РезультатСравненияМетодов", ТекстОтличаютсяТекстыМетодов());
	НайденныеСтроки = РезультатыРазбора.НайтиСтроки(Отбор);
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если ЭтотОбъект.БылаОшибкаПриЗапускеГит Тогда
			Возврат;
		КонецЕсли;
		Если Строка.Аннотация = "Перед"
			ИЛИ Строка.Аннотация = "После" Тогда
			Продолжить;
		КонецЕсли;   
		Если СтрНайти(Строка.МетодРасширение.ТелоМетода, "ПродолжитьВызов") > 0 Тогда
			Возврат; // уберем потенциально опасное автообъединение
		КонецЕсли;
		ТипТекст = "txt";
		ДопПараметрыЗапускаПриложения = Новый Структура;
		// BSLLS:MissingTemporaryFileDeletion-off
		ИмяФайлаДляОсновной = ПолучитьИмяВременногоФайла(ТипТекст);
		ИмяФайлаДляНовой = ПолучитьИмяВременногоФайла(ТипТекст);
		ИмяФайлаДляРасширения = ПолучитьИмяВременногоФайла(ТипТекст);
		// BSLLS:MissingTemporaryFileDeletion-on
		
		ДопПараметрыЗапускаПриложения.Вставить("ИмяФайлаДляОсновной", ИмяФайлаДляОсновной);
		ДопПараметрыЗапускаПриложения.Вставить("ИмяФайлаДляНовой", ИмяФайлаДляНовой);
		ДопПараметрыЗапускаПриложения.Вставить("ИмяФайлаДляРасширения", ИмяФайлаДляРасширения);
		ДопПараметрыЗапускаПриложения.Вставить("ТекущаяСтрока", Строка);
		
		СоздатьФайлСМетодом(ИмяФайлаДляОсновной, Строка.МетодОсновнаяКонфигурация, Истина);
		СоздатьФайлСМетодом(ИмяФайлаДляНовой, Строка.МетодНоваяКонфигурация, Истина);
		СоздатьФайлСМетодом(ИмяФайлаДляРасширения, Строка.МетодРасширение, Истина);
		
		ШаблонЗапуска = """%1"" merge-file ""%2"" ""%3"" ""%4"" -p";
		СтрокаЗапуска = СтрШаблон(ШаблонЗапуска,
				Объект.ПутьКGitMerge,
				ИмяФайлаДляРасширения,
				ИмяФайлаДляОсновной,
				ИмяФайлаДляНовой);
		
		ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
		ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
		ПараметрыЗапуска.ПолучитьПотокОшибок = Истина;
		ПараметрыЗапуска.ПолучитьПотокВывода = Истина;
		ПараметрыЗапуска.КодировкаИсполнения = "UTF8";
		ПараметрыЗапуска.КодировкаПотоков = "UTF8";
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПрограммыАвтоОбъединения",
				ЭтотОбъект,
				ДопПараметрыЗапускаПриложения);
		ПараметрыЗапуска.Оповещение = Оповещение;
		// BSLLS:ExternalAppStarting-off
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаЗапуска, ПараметрыЗапуска);
		// BSLLS:ExternalAppStarting-on
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеЗапускаПрограммыАвтоОбъединения(Результат, ДопПараметрыЗапускаПриложения) Экспорт
	Если Результат.ПотокОшибок <> "" Тогда
		ЭтотОбъект.БылаОшибкаПриЗапускеГит = Истина;
		Ждать УдалитьФайлыАсинх(ДопПараметрыЗапускаПриложения.ИмяФайлаДляОсновной);
		Ждать УдалитьФайлыАсинх(ДопПараметрыЗапускаПриложения.ИмяФайлаДляНовой);
		Ждать УдалитьФайлыАсинх(ДопПараметрыЗапускаПриложения.ИмяФайлаДляРасширения);
		ВызватьИсключение Результат.ПотокОшибок;
	КонецЕсли;
	РезультатАнализа = Результат.ПотокВывода;
	МаркерКонфликта = "<<<<<<<";
	Если СтрНайти(РезультатАнализа, МаркерКонфликта) = 0 Тогда
		ТекущаяСтрока = ДопПараметрыЗапускаПриложения.ТекущаяСтрока;
		ТекущаяСтрока.Авто = Истина;
		ШаблонТекста = "%1%2%3";
		
		ТекущаяСтрока.РезультатОбъединения = СтрШаблон(ШаблонТекста,
				ТекущаяСтрока.МетодРасширение.ШапкаМетода,
				РезультатАнализа,
				ТекущаяСтрока.МетодРасширение.ЗавершениеМетода);
	КонецЕсли;
	
	Ждать УдалитьФайлыАсинх(ДопПараметрыЗапускаПриложения.ИмяФайлаДляОсновной);
	Ждать УдалитьФайлыАсинх(ДопПараметрыЗапускаПриложения.ИмяФайлаДляНовой);
	Ждать УдалитьФайлыАсинх(ДопПараметрыЗапускаПриложения.ИмяФайлаДляРасширения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТолькоПросмотр(Значение)
	Элементы.ГруппаКолонки.Доступность = НЕ Значение;
	Элементы.ЗакладкиФормы.Доступность = НЕ Значение;
	Элементы.ФормаАнализ.Доступность = НЕ Значение;
	Элементы.Настройки.Доступность = НЕ Значение;
КонецПроцедуры

Функция ЭтотОбъект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

Функция НастройкиСравнения()
	Возврат ЭтотОбъект().НастройкиСравнения();
КонецФункции

&НаКлиенте
Функция ПутьКПрограммеСравнения()
	Имя = Объект.ПрограммаПросмотраИзменений;
	Возврат Объект["ПутьДо" + Имя];
КонецФункции

&НаКлиенте
Функция ПараметрыКоманднойСтроки2Файла()
	Имя = Объект.ПрограммаПросмотраИзменений;
	Возврат Объект["ПараметрыКоманднойСтроки2Файла" + Имя];
КонецФункции

&НаКлиенте
Функция ПараметрыКоманднойСтроки3Файла(БезОбъединения)
	Имя = Объект.ПрограммаПросмотраИзменений;
	Результат = Объект["ПараметрыКоманднойСтроки3Файла" + Имя];
	Если БезОбъединения Тогда
		Результат = СтрЗаменить(Результат, "-m", "");
	Иначе
		Если Объект.ПрограммаПросмотраИзменений = "KDiff3" Тогда
			Результат = Результат + " -o [РезультатОбъединения]";
		Иначе
			Результат = Результат + " [РезультатОбъединения]";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораСтрокиДерева(ВыбраннаяСтрока, ИмяДерева, БезОбъединения = Ложь)
	СтрокаДерева = ЭтотОбъект[ИмяДерева].НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.ИДСтроки) Тогда
		Возврат;
	КонецЕсли;
	Отбор = Новый Структура("ИДСтроки", СтрокаДерева.ИДСтроки);
	НайденныеСтроки = РезультатыРазбора.НайтиСтроки(Отбор);
	СтрокаРазбора = НайденныеСтроки[0];
	ПоказатьОбъединить(СтрокаРазбора, БезОбъединения);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазбораОтметкаПриИзменении(ИмяДерева)
	ТекущиеДанные = Элементы[ИмяДерева].ТекущиеДанные;
	СерыйФлаг = 2;
	Если ТекущиеДанные.Отметка = СерыйФлаг Тогда
		ТекущиеДанные.Отметка = 0;
	КонецЕсли;
	ОбновитьПодчиненныеФлажки(ТекущиеДанные, ТекущиеДанные.Отметка);
	ОбновитьРодительскиеФлажки(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Асинх Функция КаталогПустой(ПутьККаталогу)
	НайденныеФайлы = Ждать НайтиФайлыАсинх(ПутьККаталогу, "*.*");
	Возврат НайденныеФайлы.Количество() = 0;
КонецФункции

&НаКлиенте
Асинх Функция ОписаниеКаталогаСРезультатом(ПутьККаталогу)
	Файл = Новый Файл(ПутьККаталогу);
	Если Файл.Существует() = Ложь Тогда
		Возврат "Ошибка: каталог не существует";
	КонецЕсли;
	КаталогПустой = Ждать КаталогПустой(ПутьККаталогу);
	Если КаталогПустой Тогда
		Возврат "Выбран пустой каталог, при анализе в него будет скопировано расширение";
	Иначе
		Возврат "Внимание! Выбран не пустой каталог, при анализе в него будет скопировано расширение";
	КонецЕсли;
КонецФункции

&НаКлиенте
Асинх Функция ОбновитьПодписьККаталогуСРезультатом()
	ЭлементОписание = Элементы.ДекорацияКаталогСРезультатами;
	ЭлементОписание.Заголовок = Ждать ОписаниеКаталогаСРезультатом(КаталогСРезультатами);
	ЭлементОписание.ЦветТекста = ЦветТекста(ЭлементОписание.Заголовок);
	Возврат Неопределено; // Из-за Асинх
КонецФункции

&НаСервере
Процедура ВывестиРезультатВДеревья()
	ВывестиРезультатВДереве("ДеревоРазбораИнформация");
	ВывестиРезультатВДереве("ДеревоРазбораПроблемы");
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревья()
	РазвернутьДерево("ДеревоРазбораИнформация");
	РазвернутьДерево("ДеревоРазбораПроблемы");
КонецПроцедуры

&НаКлиенте
Асинх Функция КопированиеРасширениеВКаталог()
	// BSLLS:UsingSynchronousCalls-off
	Если Параметры.ИспользоватьМодальныйРежим Тогда
		МассивФайлов = Ждать НайтиФайлы(ФайлыРасширения, "*.*", Истина);
	Иначе
		МассивФайлов = Ждать НайтиФайлыАсинх(ФайлыРасширения, "*.*", Истина);
	КонецЕсли;
	// BSLLS:UsingSynchronousCalls-on
	
	Для Каждого Файл Из МассивФайлов Цикл
		НовоеРасположение = СтрЗаменить(Файл.ПолноеИмя, ФайлыРасширения, КаталогСРезультатами);
		Если Файл.ЭтоКаталог() Тогда
			Ждать СоздатьКаталогАсинх(НовоеРасположение);
		Иначе
			Ждать КопироватьФайлАсинх(Файл.ПолноеИмя, НовоеРасположение);
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено; // из-за Асинх
КонецФункции

&НаКлиенте
Процедура ЗаменитьАвтоОбновляемыеМетоды()
	Отбор = Новый Структура("Авто", Истина);
	НайденныеСтроки = РезультатыРазбора.НайтиСтроки(Отбор);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ЗаменитьМетодВФайле(НайденнаяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьМетодВФайле(СтрокаРазбора)
	ШаблонТекстаПоиска = "%1[\w\W]*?%2";
	МетодРасширение = СтрокаРазбора.МетодРасширение;
	
	ЧтоИщем = СтрШаблон(ШаблонТекстаПоиска, МетодРасширение.ШапкаМетода,
			МетодРасширение.ЗавершениеМетода);
	ЧтоИщем = ЭкранированныйТекстДляПоиска(ЧтоИщем);
	
	ЧемЗаменяем = СтрокаРазбора.РезультатОбъединения;
	
	СодержимоеРасширения = СодержимоеФайла(СтрокаРазбора.ФайлРасширения);
	НовоеСодержимое = ЗаменаПоШаблону(ЧтоИщем, СодержимоеРасширения, ЧемЗаменяем);
	
	ИмяФайла = СтрЗаменить(СтрокаРазбора.ФайлРасширения, ФайлыРасширения, КаталогСРезультатами);
	ЗаписатьФайл(ИмяФайла, НовоеСодержимое);
	
КонецПроцедуры

&НаКлиенте
Функция ЭкранированныйТекстДляПоиска(ЧтоИщем)
	ЧтоИщем = СтрЗаменить(ЧтоИщем, "(", "\(");
	ЧтоИщем = СтрЗаменить(ЧтоИщем, ")", "\)");
	Возврат ЧтоИщем;
КонецФункции

&НаКлиенте
Процедура ОбновитьИтогиОтметок(ТекущийУровень)
	Для Каждого Строка Из ТекущийУровень.ПолучитьЭлементы() Цикл
		Если Строка.Отметка = 1 Тогда
			ОбновитьПодчиненныеФлажки(Строка, 1);
			ОбновитьРодительскиеФлажки(Строка);
		Иначе
			ОбновитьИтогиОтметок(Строка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьРешенныйМетодВФайле(ФайлСРезультатом)
	НовоеСодержимое = СодержимоеФайла(ФайлСРезультатом);
	ТекущиеДанные = Элементы.ДеревоРазбораПроблемы.ТекущиеДанные;
	Отбор = Новый Структура("ИДСтроки", ТекущиеДанные.ИДСтроки);
	НайденныеСтроки = РезультатыРазбора.НайтиСтроки(Отбор);
	СтрокаРазбора = НайденныеСтроки[0];
	СтрокаРазбора.РезультатОбъединения = НовоеСодержимое;
	ЗаменитьМетодВФайле(СтрокаРазбора);
КонецПроцедуры

Функция МассивРазбора()
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатыРазбора.Выгрузить());
КонецФункции

&НаКлиенте
Процедура СохранитьНастройки()
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ФайлыНовойКонфигурации", ФайлыНовойКонфигурации);
	НастройкиФормы.Вставить("ФайлыОбновляемойКонфигурации", ФайлыОбновляемойКонфигурации);
	НастройкиФормы.Вставить("ФайлыРасширения", ФайлыРасширения);
	НастройкиФормы.Вставить("ОписаниеФайлыНовойКонфигурации", ОписаниеФайлыНовойКонфигурации);
	НастройкиФормы.Вставить("ОписаниеФайлыОбновляемойКонфигурации", ОписаниеФайлыОбновляемойКонфигурации);
	НастройкиФормы.Вставить("ОписаниеФайлыРасширения", ОписаниеФайлыРасширения);
	НастройкиФормы.Вставить("КаталогСРезультатами", КаталогСРезультатами);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("АнализРасширений", "НастройкиФормы", НастройкиФормы);
	НастройкиОбъекта = Новый Структура;
	НастройкиОбъекта.Вставить("ПрограммаПросмотраИзменений", Объект.ПрограммаПросмотраИзменений);
	НастройкиОбъекта.Вставить("ПутьКGitMerge", Объект.ПутьКGitMerge);
	НастройкиОбъекта.Вставить("ПутьДоKDiff3", Объект.ПутьДоKDiff3);
	НастройкиОбъекта.Вставить("ПутьДоP4Merge", Объект.ПутьДоP4Merge);
	НастройкиОбъекта.Вставить("ПараметрыКоманднойСтроки2ФайлаKDiff3", Объект.ПараметрыКоманднойСтроки2ФайлаKDiff3);
	НастройкиОбъекта.Вставить("ПараметрыКоманднойСтроки2ФайлаP4Merge", Объект.ПараметрыКоманднойСтроки2ФайлаP4Merge);
	НастройкиОбъекта.Вставить("ПараметрыКоманднойСтроки3ФайлаKDiff3", Объект.ПараметрыКоманднойСтроки3ФайлаKDiff3);
	НастройкиОбъекта.Вставить("ПараметрыКоманднойСтроки3ФайлаP4Merge", Объект.ПараметрыКоманднойСтроки3ФайлаP4Merge);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("АнализРасширений", "НастройкиОбъекта", НастройкиОбъекта);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	НастройкиФормы = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("АнализРасширений", "НастройкиФормы");
	Если ТипЗнч(НастройкиФормы) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиФормы);
	КонецЕсли;
	НастройкиОбъекта = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("АнализРасширений",
		"НастройкиОбъекта");
	Если ТипЗнч(НастройкиОбъекта) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, НастройкиОбъекта);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти