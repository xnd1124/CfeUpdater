//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция ДанныеЗависимости(ОписаниеЗависимости) Экспорт
	
	КлючЗависимости = КлючЗависимости(ОписаниеЗависимости);
	
	Результаты = ЮТКонтекстСлужебный.ЗначениеКонтекста(ИмяКонтекстаДанныеЗависимостей());
	ДанныеЗависимости = Результаты[КлючЗависимости];
	
	Если ДанныеЗависимости <> Неопределено Тогда
		Возврат ДанныеЗависимости;
	КонецЕсли;
	
	РезультатРазрешения = РезультатРазрешенияЗависимости(КлючЗависимости);
	ПредставлениеЗависимости = ПредставлениеЗависимости(ОписаниеЗависимости);
	
	Если РезультатРазрешения = Неопределено Или НЕ РезультатРазрешения.Успешно Тогда
		ВызватьИсключение СтрШаблон("Не указана или не разрешена зависимость `%1`", ПредставлениеЗависимости);
	КонецЕсли;
	
#Если Сервер Тогда
	Если НЕ РезультатРазрешения.ДоступностьНаСервере Тогда
		ВызватьИсключение СтрШаблон("Зависимость `%1` недоступна на сервере", ПредставлениеЗависимости);
	КонецЕсли;
#Иначе
	Если НЕ РезультатРазрешения.ДоступностьНаКлиенте Тогда
		ВызватьИсключение СтрШаблон("Зависимость `%1` недоступна на клиенте", ПредставлениеЗависимости);
	КонецЕсли;
#КонецЕсли
	
	Возврат ДанныеЗависимости;
	
КонецФункции

// Служебный метод, используется только в модуле см. ЮТЗависимости.
// 
// Параметры:
//  ОписаниеЗависимости - см. ЮТФабрика.НовоеОписаниеЗависимости 
// 
// Возвращаемое значение:
//  CommonModule.ЮТТесты
Функция ДобавитьЗависимостьПриРегистрации(ОписаниеЗависимости) Экспорт
	
	Если ЮТКонтекстСлужебный.ТекущийЭтапПрогона() <> ЮТФабрика.ЭтапыПрогона().ЗагрузкаТестов Тогда
		Возврат ОписаниеЗависимости;
	Иначе
		ЮТТестыСлужебный.ДобавитьЗависимость(ОписаниеЗависимости);
		Возврат ЮТТесты;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючЗависимости(ОписаниеЗависимости) Экспорт
	
	Идентификатор = ВРег(ОписаниеЗависимости.Идентификатор);
	
	Если ЗначениеЗаполнено(ОписаниеЗависимости.Параметры) Тогда
		Возврат ЮТОбщий.СтрокаJSON(Новый Структура("Идентификатор, Параметры", Идентификатор, ОписаниеЗависимости.Параметры));
	Иначе
		Возврат Идентификатор;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеЗависимости(ОписаниеЗависимости) Экспорт
	
	Если ЗначениеЗаполнено(ОписаниеЗависимости.Параметры) Тогда
		Возврат ОписаниеЗависимости.Идентификатор + ЮТКоллекции.ПредставлениеМассива(ОписаниеЗависимости.Параметры);
	Иначе
		Возврат ОписаниеЗависимости.Идентификатор;
	КонецЕсли;
	
КонецФункции

Функция УникальнаяЗависимость(Зависимости, ОписаниеЗависимости) Экспорт
	
	КлючЗависимости = КлючЗависимости(ОписаниеЗависимости);
	
	УникальнаяЗависимость = Зависимости[КлючЗависимости];
	
	Если УникальнаяЗависимость <> Неопределено Тогда
		Возврат УникальнаяЗависимость;
	КонецЕсли;
	
	Копия = ЮТКоллекции.СкопироватьСтруктуру(ОписаниеЗависимости);
	Копия.Параметры = Новый ФиксированныйМассив(ОписаниеЗависимости.Параметры);
	Копия.Ключ = КлючЗависимости;
	
	УникальнаяЗависимость = Новый ФиксированнаяСтруктура(Копия);
	
	Зависимости.Вставить(КлючЗависимости, УникальнаяЗависимость);
	
	Возврат УникальнаяЗависимость;
	
КонецФункции

Функция РезультатРазрешенияЗависимости(КлючЗависимости)
	
	ДанныеКонтекста = КонтекстРазрешенныеЗависимости();
	Возврат ДанныеКонтекста[КлючЗависимости];
	
КонецФункции

#Область Контексты

// Обработчик события "ИнициализацияКонтекста"
// 
// Параметры:
//  ДанныеКонтекста - Структура
Процедура ИнициализацияКонтекста(ДанныеКонтекста) Экспорт
	
	ДанныеКонтекста.Вставить(ИмяКонтекстаДанныеЗависимостей(), Новый Соответствие());
	ДанныеКонтекста.Вставить(ИмяКонтекстаРазрешенныеЗависимости(), Новый Соответствие());
	
КонецПроцедуры

Функция КонтекстРазрешенныеЗависимости() Экспорт
	
	Возврат ЮТКонтекстСлужебный.ЗначениеКонтекста(ИмяКонтекстаРазрешенныеЗависимости());
	
КонецФункции

Функция ИмяКонтекстаРазрешенныеЗависимости() Экспорт
	
	Возврат "КонтекстРазрешенныеЗависимости";
	
КонецФункции

Функция ИмяКонтекстаДанныеЗависимостей() Экспорт
	
	Возврат "КонтекстДанныеЗависимостей";
	
КонецФункции

#КонецОбласти

#КонецОбласти
